# -*- coding: utf-8 -*-
"""chest2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HFx1Z9LfkwAUyXexEcVNeSx95yN5uO08
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Veri dönüşümleri
datagen = ImageDataGenerator(
    rescale=1.0/255.0,  # Görüntü piksel değerlerini [0,1] aralığına ölçekle
    validation_split=0.2  # Eğitim veri kümesinin %20'sini doğrulama (validation) veri kümesi olarak ayır
)

# Veri kümesini yükleyin ve hazırlayın
train_dataset = datagen.flow_from_directory(
    '/content/drive/MyDrive/dataset/chest_xray/train',
    target_size=(224, 224),  # Görüntü boyutunu belirleyin (PyTorch'daki gibi)
    batch_size=16,  # Batch boyutunu belirleyin (PyTorch'daki gibi)
    class_mode='binary',  # Sınıf modunu belirleyin ('binary' veya 'categorical' gibi)
    subset='training'  # Eğitim veri kümesi olarak ayarlayın
)

test_dataset = datagen.flow_from_directory(
    '/content/drive/MyDrive/dataset/chest_xray/test',
    target_size=(224, 224),
    batch_size=16,
    class_mode='binary',
    subset='validation'  # Doğrulama (validation) veri kümesi olarak ayarlayın
)

# Modeli oluşturun, derleyin ve eğitin (kod örneği PyTorch'taki gibi)
# ...

model = models.Sequential([
    layers.Conv2D(16, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(2)  # Sınıf sayısına göre çıkış katmanının boyutunu ayarlayın
])

# Modeli derleyin
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model = models.Sequential([
    layers.Conv2D(16, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(2)  # Sınıf sayısına göre çıkış katmanının boyutunu ayarlayın
])

# Modeli derleyin
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Modeli eğitin
num_epochs = 15
model.fit(train_dataset, epochs=num_epochs)

# Model performansını değerlendirin
test_loss, test_accuracy = model.evaluate(test_dataset)
print("Test Accuracy:", test_accuracy)